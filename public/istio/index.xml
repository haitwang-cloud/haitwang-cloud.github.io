<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Istio on Tim Wang Tech Blog</title>
    <link>http://localhost:1313/istio/</link>
    <description>Recent content in Istio on Tim Wang Tech Blog</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 09 Jul 2024 09:55:49 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/istio/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Resolving Memory Error in Istioctl Analyze Command</title>
      <link>http://localhost:1313/istio/istioctl-analyze-error-en/</link>
      <pubDate>Tue, 09 Jul 2024 09:55:49 +0800</pubDate>
      <guid>http://localhost:1313/istio/istioctl-analyze-error-en/</guid>
      <description>Problem Description Recently, while using the istioctl analyze -A command to analyze Istio configurations, we encountered a perplexing error:&#xA;panic: runtime error: invalid memory address or nil pointer dereference [signal SIGSEGV: segmentation violation code=0x2 addr=0x90 pc=0x104d85f9c] goroutine 1 [running]: istio.io/istio/pkg/config/analysis/analyzers/authz.(*AuthorizationPoliciesAnalyzer).analyzeNamespaceNotFound(0x140080985a0?, 0x140080985a0, {0x105ed1480, 0x140066a7c20?}) istio.io/istio/pkg/config/analysis/analyzers/authz/authorizationpolicies.go:145 +0xdc ... The error log indicates that the AuthorizationPoliciesAnalyzer.analyzeNamespaceNotFound function triggered a panic when handling a scenario where a namespace couldn&amp;rsquo;t be found.&#xA;Introduction to Istioctl Analyze Istio is a popular service mesh solution, and istioctl is its command-line tool.</description>
    </item>
    <item>
      <title>如何解决 Istioctl Analyze -A 命令报invalid memory address问题</title>
      <link>http://localhost:1313/istio/istioctl-analyze-error/</link>
      <pubDate>Mon, 08 Jul 2024 16:47:07 +0800</pubDate>
      <guid>http://localhost:1313/istio/istioctl-analyze-error/</guid>
      <description>问题描述 最近我在尝试用 Istioctl Analyze -A来对整体的Istio配置进行分析，但是在执行命令的时候，我遇到了如下错误：&#xA;panic: runtime error: invalid memory address or nil pointer dereference [signal SIGSEGV: segmentation violation code=0x2 addr=0x90 pc=0x104d85f9c] goroutine 1 [running]: istio.io/istio/pkg/config/analysis/analyzers/authz.(*AuthorizationPoliciesAnalyzer).analyzeNamespaceNotFound(0x140080985a0?, 0x140080985a0, {0x105ed1480, 0x140066a7c20?}) istio.io/istio/pkg/config/analysis/analyzers/authz/authorizationpolicies.go:145 +0xdc istio.io/istio/pkg/config/analysis/analyzers/authz.(*AuthorizationPoliciesAnalyzer).Analyze.func1(0x104f6cdda?) istio.io/istio/pkg/config/analysis/analyzers/authz/authorizationpolicies.go:59 +0x58 istio.io/istio/pkg/config/analysis/local.(*istiodContext).ForEach(0x140066a7c20, {{0x104f6cdda, 0x11}, {0x104f5243f, 0x7}, {0x104f72cd1, 0x13}}, 0x14006897980) istio.io/istio/pkg/config/analysis/local/context.go:168 +0x574 istio.io/istio/pkg/config/analysis/analyzers/authz.(*AuthorizationPoliciesAnalyzer).Analyze(0x107d30e20, {0x105ed1480?, 0x140066a7c20}) istio.io/istio/pkg/config/analysis/analyzers/authz/authorizationpolicies.go:57 +0xf0 istio.io/istio/pkg/config/analysis.(*CombinedAnalyzer).Analyze(0x14000cbe6c0, {0x105ed1480, 0x140066a7c20}) istio.io/istio/pkg/config/analysis/analyzer.go:75 +0xcc istio.io/istio/pkg/config/analysis/local.(*IstiodAnalyzer).internalAnalyze(0x14000a7ec30, 0x1400007faa0?, 0x1400007faa0) istio.io/istio/pkg/config/analysis/local/istiod_analyze.go:146 +0x244 istio.io/istio/pkg/config/analysis/local.(*IstiodAnalyzer).ReAnalyze(...) istio.io/istio/pkg/config/analysis/local/istiod_analyze.go:131 istio.io/istio/pkg/config/analysis/local.(*IstiodAnalyzer).Analyze(0x14000a7ec30, 0x105ee1ee8?) istio.io/istio/pkg/config/analysis/local/istiod_analyze.go:171 +0xac istio.io/istio/istioctl/pkg/analyze.Analyze.func1(0x14000d6f200?, {0x140008e8020, 0x0, 0x2}) istio.io/istio/istioctl/pkg/analyze/analyze.go:229 +0xb74 github.</description>
    </item>
    <item>
      <title>深入理解Istio：网络原理与Sidecar的自动注入机制</title>
      <link>http://localhost:1313/istio/istio-sidecar-inject/</link>
      <pubDate>Thu, 20 Jun 2024 16:24:32 +0800</pubDate>
      <guid>http://localhost:1313/istio/istio-sidecar-inject/</guid>
      <description>Istio 简介 Istio，作为一款服务网格领域的佼佼者，为微服务架构提供了强大而灵活的网络能力。 本文旨在深入探讨Istio的网络原理，揭示其如何在复杂的服务间通信中发挥关键作用，同时保持高可观察性和安全性。&#xA;Istio 的核心在于其服务网格模型，它围绕着Envoy sideCar构建。每个服务实例旁边都会部署一个Envoy代理，负责处理进出服务的所有网络流量。 这一设计允许Istio在透明地拦截、路由和监控所有通信的同时，不对服务代码本身做出任何修改。&#xA;Istio sidecar 注入过程 Istio sidecar 注入过程是指在 Kubernetes 集群中，将 Istio 的 Envoy 代理作为一个 sidecar 容器，注入到每个业务容器所在的 Pod 中，从而实现对业务容器的流量管理和控制。&#xA;Istio sidecar 注入过程主要有两种方式：手动注入和自动注入。&#xA;手动注入是指在创建 Pod 时，在 Pod 的 YAML 文件中，手动添加 Istio 的 Envoy 代理容器，并且配置好 Istio 和 Envoy 代理容器之间的通信方式。这种方式比较繁琐，且容易出错。&#xA;自动注入是指在创建 Pod 时，由 Istio 的 sidecar 注入器（Istio-sidecar-injector）自动将 Istio 的 Envoy 代理容器注入到 Pod 中。这种方式比较简便，且可以保证 Istio 和 Envoy 代理容器之间的通信方式是正确的。&#xA;Istio-sidecar-injector 的工作原理是基于 Kubernetes 的 Admission Controller 机制。在创建 Pod 时，Kubernetes 会将 Pod 的创建请求提交给 Admission Controller 进行校验，如果校验通过，则将 Pod 创建成功。Istio-sidecar-injector 就是一个自定义的 Admission Controller，它在接收到 Pod 的创建请求时，会将 Istio 的 Envoy 代理容器注入到 Pod 中，然后将修改后的 Pod 创建请求提交给 Kubernetes 进行创建。</description>
    </item>
    <item>
      <title>如何在同一个k8s cluster中安装多个istio版本</title>
      <link>http://localhost:1313/istio/how-to-install-multi-istio-control-plane/</link>
      <pubDate>Thu, 20 Jun 2024 16:23:23 +0800</pubDate>
      <guid>http://localhost:1313/istio/how-to-install-multi-istio-control-plane/</guid>
      <description>准备工作 首先我们创建两个NameSpaceistio-canary &amp;amp; istio-prod,分别用于部署istio的canary版本和prod版本，然后我们给这两个NameSpace打上标签，用于后续的istio的版本选择。&#xA;➜ ~ k create ns istio-canary ➜ ~ k create ns istio-prod ➜ ~ k label ns istio-canary istio-tag=istio-canary ➜ ~ k label ns istio-prod istio-tag=istio-prod 接下来我们将要安装istio的版本，这里我们选择了1.19.3和1.18.5两个版本，分别用于canary和prod的版本。&#xA;➜ ~ curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.19.3 sh - ➜ ~ curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.18.5 sh - 首先给两个版本的istioctl设置alias，方便后续的操作。&#xA;➜ ~ istioctl1.9=&amp;#39;~/istio-1.19.3/bin/istioctl&amp;#39; ➜ ~ istioctl1.8=&amp;#39;~/istio-1.18.5/bin/istioctl&amp;#39; 开始安装istio 我们使用下面的命令来在istio-canary的NameSpace中安装istio 1.19.3版本&#xA;➜ ~ istioctl1.9 install -y -f - &amp;lt;&amp;lt;EOF apiVersion: install.istio.io/v1alpha1 kind: IstioOperator metadata: namespace: istio-canary name: istio-1-19-3 spec: profile: default revision: 1-19-3 tag: 1.</description>
    </item>
    <item>
      <title>在多个istio版本的k8s环境中构建应用</title>
      <link>http://localhost:1313/istio/build-app-under-multi-istio/</link>
      <pubDate>Thu, 20 Jun 2024 16:20:52 +0800</pubDate>
      <guid>http://localhost:1313/istio/build-app-under-multi-istio/</guid>
      <description>本教程主要基于Istio官方文档中的 Bookinfo Application，在多个istio版本的k8s环境中构建应用。&#xA;前提条件 请先参考上一篇文章Kubernetes集群中的Istio环境管理:控制平面的多实例部署实践配置好相应的istio环境， 接下来请将对应的bookinfo.yaml 文件下载到本地。&#xA;开始安装bookInfo应用 通过下面的命令来在l7-traffic-alpha namespace中安装bookInfo应用&#xA;➜ ~ k apply -f book-info.yaml -n l7-traffic-alpha # service/details created # serviceaccount/bookinfo-details created # deployment.apps/details-v1 created # service/ratings created # serviceaccount/bookinfo-ratings created # deployment.apps/ratings-v1 created # service/reviews created # serviceaccount/bookinfo-reviews created # deployment.apps/reviews-v1 created # deployment.apps/reviews-v2 created # deployment.apps/reviews-v3 created # service/productpage created # serviceaccount/bookinfo-productpage created # deployment.apps/productpage-v1 created 通过下面命令来查看对应的svc和pod是否已经创建成功,我们可以发现对应的svc已经创建成功&#xA;➜ ~ k get svc -n l7-traffic-alpha NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE details ClusterIP 100.</description>
    </item>
    <item>
      <title>Istio上游连接重置502错误分析与排查指南</title>
      <link>http://localhost:1313/istio/istio-upstream-error/</link>
      <pubDate>Fri, 14 Jun 2024 17:47:42 +0800</pubDate>
      <guid>http://localhost:1313/istio/istio-upstream-error/</guid>
      <description>本文是How to debug Istio Upstream Reset 502 UPE (old 503 UC)的中文翻译版本，内容有删减&#xA;Istio 是一个复杂的系统。对于应用程序来说，它的主要组件是 sidecar 容器 Istio-Proxy，它代理 Pod 中所有容器的流量。而这可能会导致一些问题。&#xA;问题重现🐛 在一个拥有超过 40 个不同微服务的大型系统中，QA工程师在单个端点上发现了一个bug。这该端点是 POST 端点，它返回分块（chunked）数据。&#xA;然后我们发现 Istio 返回了 502 错误，Istio日志中还有一个额外的标志：upstream_reset_before_response_started。然而应用程序日志证实了结果是正确的。&#xA;在旧版本的 Istio 中，它会返回 503 错误，带有 UC 标志。&#xA;问题分析⛏️ 让我们看看 curl 的响应，以及 Istio-proxy 的日志：&#xA;kubectl exec -it curl-0 -- curl http://http-chunked:8080/wrong -v &amp;lt; HTTP/1.1 502 Bad Gateway &amp;lt; content-length: 87 &amp;lt; content-type: text/plain &amp;lt; date: Sun, 24 Apr 2022 12:28:28 GMT &amp;lt; server: istio-envoy &amp;lt; x-envoy-decorator-operation: http-chunked.</description>
    </item>
  </channel>
</rss>
